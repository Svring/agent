import { z } from 'zod';

// Shared utility schemas
const CoordinatesSchema = z.object({
  x: z.number().nullable().describe('X-coordinate (horizontal position) in pixels. Null if not applicable.'),
  y: z.number().nullable().describe('Y-coordinate (vertical position) in pixels. Null if not applicable.'),
}).describe('Screen coordinates [x, y] for mouse actions.');

const TimestampSchema = z.string().datetime().or(z.date()).describe('ISO 8601 timestamp or Date object, auto-set by Payload CMS.');

// Application schema
export const ApplicationSchema = z.object({
  id: z.number().describe('Unique identifier for the application, auto-generated by Payload CMS.'),
  name: z.string().min(1, 'Application name is required').describe('Unique, descriptive name of the application.'),
  description: z.string().min(1, 'Application description is required').describe('Details about the application\'s purpose and behavior for AI context.'),
  version: z.string().optional().nullable().describe('Optional version identifier for tracking application versions.'),
  createdAt: TimestampSchema.describe('Creation timestamp, auto-set by Payload CMS.'),
  updatedAt: TimestampSchema.describe('Last update timestamp, auto-set by Payload CMS.'),
}).describe('Defines an application targeted by workflows.');

// Workflow Step schema
const WorkflowStepSchema = z.object({
  action: z.enum([
    'screenshot', 'left_click', 'right_click', 'middle_click', 'double_click',
    'left_click_drag', 'mouse_move', 'type', 'key', 'cursor_position',
  ]).describe(
    "Action type for this step: 'screenshot' (capture screen), 'left_click' (single left click), 'right_click' (single right click), " +
    "'middle_click' (single middle click), 'double_click' (double left click), 'left_click_drag' (click and drag), 'mouse_move' (move mouse), " +
    "'type' (type text), 'key' (press key), 'cursor_position' (get mouse position). Required."
  ),
  description: z.string().min(1, 'Step description (goal) is required').describe(
    "Detailed goal and context (e.g., 'Click Save at [100, 200]' or 'Type username'). Required for LLM intent."
  ),
  coordinates: CoordinatesSchema.optional().nullable().describe(
    "Starting [x, y] for 'left_click', 'right_click', 'middle_click', 'double_click', 'left_click_drag', 'mouse_move'. Null if not needed."
  ),
  endCoordinates: CoordinatesSchema.optional().nullable().describe(
    "Ending [x, y] for 'left_click_drag'. Specifies drag release point. Null if not applicable."
  ),
  text: z.string().optional().nullable().describe(
    "Text for 'type' (e.g., 'hello world') or 'key' (e.g., 'enter'). Required for those actions, null otherwise."
  ),
  delay: z.number().default(0).optional().nullable().describe(
    'Wait time (ms) before this step (e.g., 1000 = 1s). Defaults to 0. Null if no delay specified.'
  ),
  condition: z.string().optional().nullable().describe(
    "Optional prerequisite (e.g., 'Wait for Save button'). LLM verifies if provided. Null if none."
  ),
  onError: z.string().optional().nullable().describe(
    "Error handling instruction (e.g., 'Retry after 500ms'). Null if no fallback specified."
  ),
  id: z.string().optional().describe('Unique step ID, auto-generated by Payload CMS for array items.'),
}).describe(`A single step in a workflow sequence. Each action type requires specific fields:

Action Types and Required Fields:
- screenshot: Only 'action' and 'description' required. Captures current screen state.
- left_click: Requires 'coordinates' with valid x,y values. Performs a single left mouse click.
- right_click: Requires 'coordinates' with valid x,y values. Performs a single right mouse click.
- middle_click: Requires 'coordinates' with valid x,y values. Performs a middle mouse button click.
- double_click: Requires 'coordinates' with valid x,y values. Performs a double left mouse click.
- left_click_drag: Requires both 'coordinates' (start) and 'endCoordinates' (end) with valid x,y values. Performs click-and-drag.
- mouse_move: Requires 'coordinates' with valid x,y values. Moves mouse pointer without clicking.
- type: Requires 'text' field containing the text to type. Types text at current cursor position.
- key: Requires 'text' field specifying the key to press (e.g., 'enter', 'tab', 'escape'). Presses a keyboard key.
- cursor_position: No additional fields required. Returns current mouse cursor position.

Optional fields for all actions:
- delay: Milliseconds to wait before executing this step.
- condition: Prerequisite that must be true before executing this step.
- onError: Instructions for handling errors during step execution.`);

// Workflow schema
export const WorkflowSchema = z.object({
  id: z.number().describe('Unique workflow ID, auto-generated by Payload CMS.'),
  name: z.string().min(1, 'Workflow name is required').describe('Unique, descriptive workflow name (e.g., "Save File in Notepad").'),
  description: z.string().optional().nullable().describe('Optional workflow purpose (e.g., "Automates file saving"). Null if not needed.'),
  application: ApplicationSchema.describe('Full application object this workflow targets. Sets execution context.'),
  steps: z.array(WorkflowStepSchema).min(1, 'At least one step required').describe(
    'Sequence of actions to automate. Must have 1+ steps.'
  ),
  sequenceDescription: z.string().optional().nullable().describe(
    "Optional natural-language summary for LLM (e.g., 'Open Notepad, type, save'). Null if not provided."
  ),
  createdAt: TimestampSchema.describe('Workflow creation timestamp.'),
  updatedAt: TimestampSchema.describe('Workflow last update timestamp.'),
}).describe('Defines a complete workflow for automation.');

// Default step schema (minimal required fields)
export const DefaultStepSchema = WorkflowStepSchema.pick({ action: true, description: true })
  .describe('Minimal step schema with only required fields for creation.');

// Input schemas for creating/updating workflows
export const WorkflowCreateInputSchema = z.object({
  name: WorkflowSchema.shape.name,
  description: WorkflowSchema.shape.description,
  application: z.number().describe('Numeric ID of the target application for this workflow.'),
  steps: z.array(DefaultStepSchema).min(1, 'At least one step required').describe(
    'Initial steps with action and description only.'
  ),
}).describe('Input schema for creating a new workflow, omitting auto-generated fields.');

export const WorkflowUpdateInputSchema = WorkflowCreateInputSchema.partial()
  .describe(`Input schema for updating a workflow, all fields optional for partial updates. 
Field requirements by action type:
- When updating name: name field must be a non-empty string
- When updating steps: steps must be a complete array (existing steps will be replaced)
- When adding steps: each step requires 'action' and 'description' fields
- For click actions (left_click, right_click, etc.): coordinates object with x,y values is required
- For drag actions: both coordinates and endCoordinates objects with x,y values are required
- For type/key actions: text field is required
All properties retain their validation rules from the base schema.`);

// TypeScript types
export type Application = z.infer<typeof ApplicationSchema>;
export type Workflow = z.infer<typeof WorkflowSchema>;
export type WorkflowStep = z.infer<typeof WorkflowStepSchema>;
export type DefaultStep = z.infer<typeof DefaultStepSchema>;
export type WorkflowCreateInput = z.infer<typeof WorkflowCreateInputSchema>;
export type WorkflowUpdateInput = z.infer<typeof WorkflowUpdateInputSchema>;