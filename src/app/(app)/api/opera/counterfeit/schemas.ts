import { z } from 'zod';

// --- Schemas ---

export const PlanStepInstructionSchema = z.object({
  type: z.enum(['reason', 'browser', 'terminal', 'answer']).describe("The type of step to perform: reasoning, browser action, terminal action, or final answer."),
  instruction: z.string().describe("The detailed instruction for the specified type. For 'reason' and 'answer', this is the content itself."),
});

export const ReasonResultSchema = z.object({
  content: z.string().describe("The reasoning, interpretation, or intermediate plan generated by the orchestrator."),
});

export const BrowserResultSchema = z.object({
  content: z.string().describe("The textual result or summary of the browser agent's execution."),
  toolCalls: z.array(z.any()).optional().describe("The tool calls made by the browser agent."),
  toolResults: z.array(z.any()).optional().describe("The results of the tool calls made by the browser agent."),
});

export const TerminalResultSchema = z.object({
  content: z.string().describe("The textual result or summary of the terminal agent's execution, including stdout/stderr."),
  toolCalls: z.array(z.any()).optional().describe("The tool calls made by the terminal agent."),
  toolResults: z.array(z.any()).optional().describe("The results of the tool calls made by the terminal agent."),
});

export const AnswerResultSchema = z.object({
  content: z.string().describe("The final answer to the user's request."),
});

export const ErrorResultSchema = z.object({
  error: z.string().describe("Description of the error that occurred during a step.")
});

// Union of all possible step results
export const PlanStepResultSchema = z.union([
  ReasonResultSchema,
  BrowserResultSchema,
  TerminalResultSchema,
  AnswerResultSchema,
  ErrorResultSchema
]).describe("The result of executing a plan step.");

export const PlanStepSchema = z.object({
  step: z.number().describe("The step number."),
  instruction: PlanStepInstructionSchema,
  result: PlanStepResultSchema.optional().describe("The result of executing the step's instruction. Can be omitted if the step hasn't executed yet or failed before producing a result."),
});

// --- Types ---
export type PlanStepInstruction = z.infer<typeof PlanStepInstructionSchema>;
export type ReasonResult = z.infer<typeof ReasonResultSchema>;
export type BrowserResult = z.infer<typeof BrowserResultSchema>;
export type TerminalResult = z.infer<typeof TerminalResultSchema>;
export type AnswerResult = z.infer<typeof AnswerResultSchema>;
export type ErrorResult = z.infer<typeof ErrorResultSchema>;
export type PlanStepResult = z.infer<typeof PlanStepResultSchema>;
export type PlanStep = z.infer<typeof PlanStepSchema>; 